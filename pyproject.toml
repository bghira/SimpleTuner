[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "simpletuner"
dynamic = ["version", "dependencies"]
description = "Stable Diffusion 2.x and XL tuner."
readme = "README.md"
license = "AGPL-3.0-or-later"
authors = [
    {name = "bghira"},
]
maintainers = [
    {name = "bghira"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]
keywords = [
    "stable-diffusion",
    "machine-learning",
    "deep-learning",
    "pytorch",
    "cuda",
    "rocm",
    "diffusion-models",
    "ai",
    "image-generation"
]
requires-python = ">=3.11,<3.13"

# Dynamic fields are handled by setup.py above

[project.optional-dependencies]
# Platform-specific extras (for manual override)
cuda = [
    "triton>=3.3.0",
    "bitsandbytes>=0.45.0",
    "deepspeed>=0.17.2",
    "nvidia-cudnn-cu12",
    "nvidia-nccl-cu12",
    "lm-eval>=0.4.4",
]
rocm = [
    "torchao>=0.11.0",
]
apple = [
    "torchao>=0.11.0",
]

# Feature extras
jxl = [
    "pillow-jxl-plugin>=1.3.1",
]

# Development extras
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Testing extras
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
]

# Documentation extras
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

# All extras combined
all = [
    "pillow-jxl-plugin>=1.3.1",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
]

[project.scripts]
simpletuner = "simpletuner.cli:main"
simpletuner-train = "simpletuner.train:main"
simpletuner-configure = "simpletuner.configure:main"
simpletuner-inference = "simpletuner.inference:main"

[project.urls]
Homepage = "https://github.com/bghira/SimpleTuner"
Repository = "https://github.com/bghira/SimpleTuner.git"
Issues = "https://github.com/bghira/SimpleTuner/issues"
Documentation = "https://github.com/bghira/SimpleTuner/blob/main/README.md"
Changelog = "https://github.com/bghira/SimpleTuner/releases"

# Setuptools configuration
[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.dynamic]
version = {attr = "simpletuner.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["simpletuner*"]
exclude = ["tests*", "scripts*", "install*", "config*", "documentation*"]

[tool.setuptools.package-data]
simpletuner = [
    "examples/**/*",
    "py.typed",
]

# Development tools configuration
[tool.black]
line-length = 125
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 125
known_first_party = ["simpletuner"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when ready for strict typing
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "transformers.*",
    "diffusers.*",
    "accelerate.*",
    "wandb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=simpletuner",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["simpletuner"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
